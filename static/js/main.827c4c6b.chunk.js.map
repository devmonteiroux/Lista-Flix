{"version":3,"sources":["Tmdb.js","components/MovieRow.js","components/FeaturedMovie.js","components/Header.js","App.js","index.js"],"names":["API_KEY","basicFetch","endpoint","a","fetch","req","json","getHomeList","slug","title","items","getMovieInfo","movieId","type","info","useState","scrollX","setscrollX","className","onClick","x","Math","round","window","innerWidth","style","fontSize","listW","results","length","marginLeft","width","map","item","key","src","poster_path","alt","original_title","firstDate","Date","first_air_date","genres","i","push","name","description","overview","substring","backgroundSize","backgroundPosition","backgroundImage","backdrop_path","original_name","vote_average","getFullYear","number_of_seasons","href","id","join","black","movieList","setMovieList","featuredData","setFeaturedData","blackHeader","setBlackHeader","useEffect","Tmdb","list","originals","filter","randomChosen","floor","random","chosen","chosenInfo","loadAll","scroolListener","scrollY","addEventListener","removeEventListener","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.827c4c6b.chunk.js","sourcesContent":["const API_KEY = 'd8737548bc4022a08224351991582854';\nconst API_BASE = 'https://api.themoviedb.org/3';\n\nconst basicFetch = async (endpoint) => {\n    const req = await fetch(`${API_BASE}${endpoint}`);\n    const json = await req.json();\n    return json;\n}\n\nexport default {\n    getHomeList: async () => {\n        return [\n            {\n                slug: 'originals',\n                title: 'Originais do MarvelFlix',\n                items: await basicFetch(`/discover/tv?with_network=213&language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'trending',\n                title: 'Recomendados para Você',\n                items: await basicFetch(`/trending/all/week?language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'toprated',\n                title: 'Em Alta',\n                items: await basicFetch(`/movie/top_rated?language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'action',\n                title: 'Ação',\n                items: await basicFetch(`/discover/movie?with_genres=28&language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'comedy',\n                title: 'Comédia',\n                items: await basicFetch(`/discover/movie?with_genres=35&language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'horror',\n                title: 'Terror',\n                items: await basicFetch(`/discover/movie?with_genres=27&language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'romance',\n                title: 'Romance',\n                items: await basicFetch(`/discover/movie?with_genres=10749&language=pt-BR&api_key=${API_KEY}`)\n            },\n        ];    \n    },\n    getMovieInfo: async (movieId, type) => {\n        let info = {};\n\n        if(movieId) {\n            switch(type) {\n                case 'movie':\n                    info = await basicFetch(`/movie/${movieId}?language=pt-BR&api_key=${API_KEY}`);\n                break;\n                case 'tv':\n                    info = await basicFetch(`/tv/${movieId}?language=pt-BR&api_key=${API_KEY}`);\n                break;\n                default:\n                    info = null;\n                break;\n            }\n        }\n\n        return info;\n    }\n}","import React, { useState } from 'react';\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\n\nimport './MovieRow.css';\n\nexport default ({title, items}) => {\n    const [scrollX, setscrollX] = useState(0);\n\n    const handleLeftArrow = () => {\n        let x = scrollX + Math.round(window.innerWidth / 2);\n        if (x > 0) {\n            x = 0;\n        }\n        setscrollX(x);\n    }\n\n    const handleRightArrow = () => {\n        let x = scrollX - Math.round(window.innerWidth / 2);\n        let listW = items.results.length * 150;\n        if((window.innerWidth - listW) > x) {\n            x = (window.innerWidth - listW) - 60;\n        } \n        setscrollX(x);\n    }\n\n    return (\n        <div className=\"movieRow\">\n            <h2>{title}</h2>\n            <div className=\"movieRow--left\" onClick={handleLeftArrow}>\n                <NavigateBeforeIcon style={{fontSize: 50}} />\n            </div>\n            <div className=\"movieRow--right\" onClick={handleRightArrow}>\n                <NavigateNextIcon style={{fontSize: 50}} />\n            </div>\n\n            <div className=\"movieRow--listarea\">\n                <div className=\"movieRow--list\" style={{\n                    marginLeft: scrollX,\n                    width: items.results.length * 150\n                }}>\n                    {items.results.length > 0 && items.results.map((item, key) => (\n                        <div key={key} className=\"movieRow--item\">\n                            <img src={`https://image.tmdb.org/t/p/w300${item.poster_path}`} alt={item.original_title} />\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </div>\n    );\n}","import React from 'react';\n\nimport './FeaturedMovie.css';\n\nexport default ({item}) => {\n    let firstDate = new Date(item.first_air_date);\n    let genres = [];\n    for(let i in item.genres) {\n        genres.push( item.genres[i].name );\n    }\n\n    let description = item.overview;\n    if (description.length > 200) {\n        description = description.substring(0, 200)+'...';\n    }\n\n    return (\n        <section className=\"featured\" style={{\n            backgroundSize: 'cover',\n            backgroundPosition: 'center',\n            backgroundImage: `url(https://image.tmdb.org/t/p/original${item.backdrop_path})`\n        }}>\n            <div className=\"featured--vertical\">\n                <div className=\"featured--horizontal\">\n                    <div className=\"featured--name\">{item.original_name}</div>\n                    <div className=\"featured--info\">\n                        <div className=\"featured--points\">{item.vote_average} pontos</div>\n                        <div className=\"featured--year\">{firstDate.getFullYear()}</div>\n                        <div className=\"featured--seasons\">{item.number_of_seasons} temporada{item.number_of_seasons !== 1 ? 's' : ''}</div>\n                    </div>\n                    <div className=\"featured--description\">{description}</div>\n                    <div className=\"featured--buttons\">\n                        <a href={`/watch/${item.id}`} className=\"featured--watchbutton\">► Assistir</a>\n                        <a href={`/list/add/${item.id}`} className=\"featured--mylistbutton\">+ Minha Lista</a>\n                    </div>\n                    <div className=\"featured--genres\"><strong>Gêneros:</strong> {genres.join(', ')}</div>\n                </div>\n            </div>\n        </section>\n    );\n}","import React from 'react';\n\nimport './Header.css';\n\nexport default ({black}) => {\n    return (\n        <header className={black ? 'black' : ''}>\n            <div className=\"header--logo\">\n                <a href=\"/\">\n                    <img src=\"https://i.ibb.co/TYmKdpL/marvelflix.png\" alt=\"Netflix\" />\n                </a>\n            </div>\n            <div className=\"header--user\">\n                <a href=\"/\">\n                    <img src=\"https://i.ibb.co/Lr7smGF/usuario.png\" alt=\"Usuário\" />\n                </a>\n            </div>\n        </header>\n    );\n}","import React, { useEffect, useState } from 'react';\n\nimport Tmdb from './Tmdb'\nimport MovieRow from './components/MovieRow';\nimport FeaturedMovie from './components/FeaturedMovie'; \nimport Header from './components/Header';\n\nimport './App.css';\n\nexport default () => {\n\n  const [movieList, setMovieList] = useState([]);\n  const [featuredData, setFeaturedData] = useState(null);\n  const [blackHeader, setBlackHeader] = useState(false);\n\n  useEffect(() => {\n    const loadAll = async () => {\n      // Pegando a lista TOTAL\n      let list = await Tmdb.getHomeList();\n      setMovieList(list);\n\n      // Pegando o Featured\n      let originals = list.filter(i => i.slug === 'originals');\n      let randomChosen = Math.floor(Math.random() * (originals[0].items.results.length - 1));\n      let chosen = originals[0].items.results[randomChosen];\n      let chosenInfo = await Tmdb.getMovieInfo(chosen.id, 'tv');\n      setFeaturedData(chosenInfo);\n    }\n    \n    loadAll();\n  }, []);\n\n  useEffect(() => {\n    const scroolListener = () => {\n      if(window.scrollY > 10) {\n        setBlackHeader(true);\n      } else {\n        setBlackHeader(false);\n      }\n    }\n\n    window.addEventListener('scroll', scroolListener);\n    return () => {\n      window.removeEventListener('scroll', scroolListener);\n    }\n  }, []);\n\n  return (\n    <div className=\"page\">\n\n      <Header black={blackHeader} />\n\n      {featuredData && \n        <FeaturedMovie item={featuredData} />\n      }\n\n      <section className=\"lists\">\n        {movieList.map((item, key) => (\n          <MovieRow key={key} title={item.title} items={item.items} />\n        ))}\n      </section>\n\n      <footer>\n      <p>Copyright © 2022 Marvelflix Brasil. Todos os direitos reservados.</p>\n      <p>Criado Exclusivamente Para Fins Educacionais</p>\n        Direitos de imagem para Netflix | Dados pegos do site Themoviedb.org\n      </footer>\n      \n      {movieList.length <= 0 &&\n        <div className=\"loading\">\n            <img src=\"https://www.filmelier.com/pt/br/news/wp-content/uploads/2020/03/netflix-loading.gif\" alt=\"Carregando\" />\n        </div>\n      }\n    </div>\n  );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}